// SPDX-FileCopyrightText: 2021 Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

package common

import "github.com/omec-project/gnbsim/logger"

type ProcedureType uint8

const (
	UNKNOWN_PROCEDURE ProcedureType = 0 + iota
	REGISTRATION_PROCEDURE
	PDU_SESSION_ESTABLISHMENT_PROCEDURE
	UE_REQUESTED_PDU_SESSION_RELEASE_PROCEDURE
	USER_DATA_PKT_GENERATION_PROCEDURE
	UE_INITIATED_DEREGISTRATION_PROCEDURE
	AN_RELEASE_PROCEDURE
	UE_TRIGGERED_SERVICE_REQUEST_PROCEDURE
	NW_TRIGGERED_UE_DEREGISTRATION_PROCEDURE
	AMF_RELEASE_PROCEDURE
	NW_REQUESTED_PDU_SESSION_RELEASE_PROCEDURE
	CUSTOM_PROCEDURE
)

var procStrMap = map[ProcedureType]string{
	UNKNOWN_PROCEDURE:                          "UNKNOWN-PROCEDURE",
	REGISTRATION_PROCEDURE:                     "REGISTRATION-PROCEDURE",
	PDU_SESSION_ESTABLISHMENT_PROCEDURE:        "PDU-SESSION-ESTABLISHMENT-PROCEDURE",
	USER_DATA_PKT_GENERATION_PROCEDURE:         "USER-DATA-PACKET-GENERATION-PROCEDURE",
	UE_INITIATED_DEREGISTRATION_PROCEDURE:      "UE-INITIATED-DEREGISTRATION-PROCEDURE",
	AN_RELEASE_PROCEDURE:                       "AN-RELEASE-PROCEDURE",
	UE_TRIGGERED_SERVICE_REQUEST_PROCEDURE:     "UE-TRIGGERED-SERVICE-REQUEST-PROCEDURE",
	NW_TRIGGERED_UE_DEREGISTRATION_PROCEDURE:   "NW-TRIGGERED-UE-DEREGISTRATION-PROCEDURE",
	AMF_RELEASE_PROCEDURE:                      "AMF-RELEASE-PROCEDURE",
	UE_REQUESTED_PDU_SESSION_RELEASE_PROCEDURE: "UE-REQUESTED-PDU-SESSION-RELEASE-PROCEDURE",
	NW_REQUESTED_PDU_SESSION_RELEASE_PROCEDURE: "NW-REQUESTED-PDU-SESSION-RELEASE-PROCEDURE",
	CUSTOM_PROCEDURE:                           "CUSTOM-PROCEDURE",
}

func (id ProcedureType) String() string {
	procStr, ok := procStrMap[id]
	if !ok {
		logger.AppLog.Fatalf("Invalid Procedure ID: %#v", id)
	}
	return procStr
}

func GetProcId(name string) ProcedureType {
	var p ProcedureType = UNKNOWN_PROCEDURE
	for id, v := range procStrMap {
		if v == name {
			return id
		}
	}
	return p
}
